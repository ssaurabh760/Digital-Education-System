/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface;

import UserInterface.WorkAreas.EmployeeEngagement.EmployeeLandingPanel;
import UserInterface.WorkAreas.CertificationAuthority.CertificateAuthorityLandingJPanel;
import UserInterface.WorkAreas.AccessManager.SignUpJPanel;
import UserInterface.WorkAreas.AccessManager.LoginJPanel;
import UserInterface.WorkAreas.AccessManager.UserProfileJPanel;
import UserInterface.WorkAreas.FacultyRole.ProfessorLandingJPanel;
import UserInterface.WorkArea.StudentRole.StudentLandingJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import Business.User.User;
import Business.User.UserManager;
import javax.swing.JPanel;
import Business.Company;
import Business.Course.Course;
import Business.Course.CourseCatalog;
import Business.Course.CourseOffering;
import Business.Student.SCHistoryManager;
import Business.Student.StudentCourseHistory;
import Business.Course.Term;
import UserInterface.WorkAreas.AdminRole.AdminLandingJPanel;

/**
 *
 * @author nivcodes
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    UserManager userManager;
    public User current_user;
    CourseCatalog courseCatalog = new CourseCatalog("Information sciences");
    public SCHistoryManager scHisManager = new SCHistoryManager();
    String defaultspeciality = "Data Science";
    Term spring2023 = new Term("Spring 2023");
    Term fall2023 = new Term("Fall 2023");
    Term spring2024 = new Term("Spring 2024");
    CourseCatalog courselist;
    Term term;
  
    public ArrayList<Company> companies = new ArrayList<>();
    public ArrayList<StudentCourseHistory> gradRequest = new ArrayList<>();//num of student reday to graduate 
    public ArrayList<CourseOffering> coList = new ArrayList<>();
    public static MainFrame mfInstance;
    public MainFrame() {
        initComponents();
        userManager = new UserManager();
        current_user = new User();
        courselist = new CourseCatalog(defaultspeciality);
        this.term = fall2023;
        userManager.createAdmin();
        userManager.createStudent();
        userManager.createProfessor();
        userManager.createCauthority();
//        need to create instance like this for every model
        mfInstance = this;
        loginUser();
        createData();
        System.out.println("done");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        controlPanel = new javax.swing.JPanel();
        btnLogin = new javax.swing.JButton();
        btnPersonal = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        btnSignUp = new javax.swing.JButton();
        workArea = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controlPanel.setBackground(new java.awt.Color(153, 204, 255));
        controlPanel.setPreferredSize(new java.awt.Dimension(200, 1000));

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnPersonal.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        btnPersonal.setText("Personal info");
        btnPersonal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPersonalActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnSignUp.setText("Sign up");
        btnSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignUpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSignUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPersonal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        controlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnLogin, btnLogout, btnPersonal});

        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(btnSignUp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPersonal, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 273, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addGap(42, 42, 42))
        );

        controlPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLogin, btnLogout, btnPersonal});

        splitPane.setLeftComponent(controlPanel);

        workArea.setPreferredSize(new java.awt.Dimension(1000, 800));

        javax.swing.GroupLayout workAreaLayout = new javax.swing.GroupLayout(workArea);
        workArea.setLayout(workAreaLayout);
        workAreaLayout.setHorizontalGroup(
            workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 677, Short.MAX_VALUE)
        );
        workAreaLayout.setVerticalGroup(
            workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );

        splitPane.setRightComponent(workArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(splitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(splitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        if(current_user.islogged()){
            setLandingPage(current_user);     
        }else{
            loginUser();
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnPersonalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPersonalActionPerformed
        // TODO add your handling code here:
        if(current_user.islogged()){
            UserProfileJPanel personalPanel = new UserProfileJPanel(userManager, current_user);
            splitPane.setRightComponent(personalPanel);
        }else{
            JOptionPane.showMessageDialog(this, "You need to log in for this action.");
            
        }
    }//GEN-LAST:event_btnPersonalActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        current_user = new User();
        loginUser();
        JOptionPane.showMessageDialog(this, "Successfully logged out.");
        
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignUpActionPerformed
        // TODO add your handling code here:
        if(!current_user.islogged()){
        
            SignUpJPanel signupPanel = new SignUpJPanel(userManager, current_user);
            splitPane.setRightComponent(signupPanel);
        }
    }//GEN-LAST:event_btnSignUpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnPersonal;
    private javax.swing.JButton btnSignUp;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JPanel workArea;
    // End of variables declaration//GEN-END:variables

    private void loginUser(){
        LoginJPanel loginPanel = new LoginJPanel(userManager, current_user);
        splitPane.setRightComponent(loginPanel);
    }
    
    public void setMainframeSplitFrame(javax.swing.JPanel p){
        splitPane.setRightComponent(p);
    }
    
    public void setLandingPage(User current_user){
        if (current_user.isAdmin()){
            //Add admin landing page code.
            AdminLandingJPanel AdminPanel = new AdminLandingJPanel(userManager, current_user, courseCatalog, term, scHisManager,gradRequest);
            splitPane.setRightComponent(AdminPanel);
        } else if (current_user.isStudent()){
            StudentLandingJPanel studentPanel = new StudentLandingJPanel(scHisManager, fall2023, userManager, current_user);
            splitPane.setRightComponent(studentPanel);
        }else if (current_user.isProfessor()){
//                Manage list of the users professor has access of
            ProfessorLandingJPanel ProfessorPanel = new ProfessorLandingJPanel(userManager, current_user, courseCatalog, term, scHisManager, spring2023);
            splitPane.setRightComponent(ProfessorPanel);
        }else if (current_user.isCAuthority()){
            CertificateAuthorityLandingJPanel CAPanel = new CertificateAuthorityLandingJPanel(gradRequest, userManager, current_user);
            splitPane.setRightComponent(CAPanel);
        }else if (current_user.isEmployee()){
            Company c = retrieveCompany(current_user.getName());
            coList.addAll(spring2023.getColist());
            coList.addAll(fall2023.getColist());
            EmployeeLandingPanel EPanel = new EmployeeLandingPanel(coList, c, courseCatalog, userManager, current_user);
            splitPane.setRightComponent(EPanel);
        }
        
    }
    
    public void createData(){
//        PROFESSORS
        String[] profnameArray = {"Samuel","Scarlett","Sofia"};
        ArrayList<String> pnames = new ArrayList<>();
        int x = 1;
        pnames.addAll(Arrays.asList(profnameArray));
        for (String n : pnames) {
            User u = userManager.addNewUser();
            u.setName(n);
            u.setEmail(n+"@officialemail.com");
            u.setRoleProfessor();
            u.generateRatings();
            u.updatePassword("password");
            switch (x) {
                case 1 -> u.setSpecialty("Artificial intelligence");
                case 2 -> u.setSpecialty("Database");
                case 3 -> u.setSpecialty("Cloud computing");
                default -> {
                }
            }
            x++;
            userManager.updateUser(u);
            System.out.println(u);
        }
//        EMPLOYEE and COMPANIES
        String[] empnameArray = {"Victoria","Violet","William","Zoe"};
        ArrayList<String> enames = new ArrayList<>();
        enames.addAll(Arrays.asList(empnameArray));
        for (String n : enames) {
            User u = userManager.addNewUser();
            u.setName(n);
            u.setEmail(n+"@company.com");
            u.setRoleEmployee();
            u.updatePassword("password");
            userManager.updateUser(u);
            System.out.println(u);
            Company c = new Company(n+" Consulting Pvt Ltd.", "Boston", u);
            c.setEmployee(u);
            companies.add(c);
            System.out.println(c);
        }
//      Courses and Add course offerings
        String[] cnamesArray = {"Software Engineering Fundamentals","Agile Software Development Practices",
            "Object-Oriented Programming in Java","Web Application Development with JavaScript",
            "Database Design and SQL for Developers","Software Architecture and Design Patterns",
            "DevOps and Continuous Integration","Secure Coding and Ethical Hacking",
            "Machine Learning for Software Engineers","Advanced Topics in Software Engineering", 
            "Algorithms 1", "Algorithms 2", "Computer Operating systems", "Internet of things: a new perspective",
            "Advances in software engineering", "Product management and principles", "English for engineers",
            "Building business systems"
        };
        int i = 1;
        ArrayList<String> cnames = new ArrayList<>();
        cnames.addAll(Arrays.asList(cnamesArray));
        User samuel = userManager.findUserbyName("Samuel");
        User scarlett = userManager.findUserbyName("Scarlett");
        User sofia = userManager.findUserbyName("Sofia");
        int y = 1;
        for (String n : cnames) {
            Course c = courseCatalog.addNewCourse();
            c.setCode("INFO-"+c.getId());
            c.setCoursename(n);
            c.setCredit(4);
            c.setPrice(1500.00);
            courseCatalog.updateCourse(c);
            CourseOffering co = fall2023.addNewCourseOffering(c);
            co.setLanguage("English");
            co.setSubtitle(true);
            switch (y%3) {
                case 0 : 
                    co.setProfessor(samuel);
                    ArrayList<Course> list = fall2023.getProfessorCourseMap().getOrDefault(samuel, new ArrayList<>());
                    list.add(c);
                    fall2023.getProfessorCourseMap().put(samuel,list);
                    break;
                case 1 : 
                    co.setProfessor(scarlett);
                    ArrayList<Course> list1 = fall2023.getProfessorCourseMap().getOrDefault(scarlett, new ArrayList<>());
                    list1.add(c);
                    fall2023.getProfessorCourseMap().put(scarlett,list1);
                    break;
                case 2 : 
                    co.setProfessor(sofia);
                    ArrayList<Course> list2 = fall2023.getProfessorCourseMap().getOrDefault(sofia, new ArrayList<>());
                    fall2023.getProfessorCourseMap().put(sofia,list2);
                    break;
                default : 
                    break;
            }
            co.setRanking(i++);
            System.out.println("course offering:"+ co);
            fall2023.updateCourse(co);
            co = spring2023.addNewCourseOffering(c);
            co.setLanguage("English");
            co.setSubtitle(true);
            switch (y%3) {
                case 0 -> co.setProfessor(samuel);
               
                case 1 -> co.setProfessor(scarlett);
                case 2 -> co.setProfessor(sofia);
                default -> {
                }
            }
            co.setRanking(i);
            System.out.println("course offering:"+ co);
            spring2023.updateCourse(co);
            co = spring2024.addNewCourseOffering(c);
            co.setLanguage("English");
            co.setSubtitle(true);
            switch (y%3) {
                case 0 -> co.setProfessor(sofia);
                case 1 -> co.setProfessor(samuel);
                case 2 -> co.setProfessor(scarlett);
                default -> {
                }
            }
            co.setRanking(i);
            spring2024.updateCourse(co);
            System.out.println("course offering:"+ co);
            System.out.println(c);
            y++;
        }
        
        CourseOffering c1 = fall2023.findCourseOfferingbyName("Software Engineering Fundamentals");
        CourseOffering c2 = fall2023.findCourseOfferingbyName("Database Design and SQL for Developers");
        CourseOffering c3 = spring2023.findCourseOfferingbyName("Object-Oriented Programming in Java");
        CourseOffering c4 = spring2023.findCourseOfferingbyName("Software Architecture and Design Patterns");
        
        String[] studentNameArray = {
            "Abigail","Aiden","Alexander","Alice","Amelia","Andrew",
            "Anna","Ava","Benjamin","Caleb","Camila","Charlotte","Chloe",
            "Daniel","David","Ella","Emily","Emma","Ethan","Evelyn","Gabriel",
            "Grace","Hannah","Harper","Henry","Isabella","Jack","Jackson",
            "Jacob","James","Joseph","Joshua","Liam","Lily","Logan","Lucas",
            "Madison","Mason","Matthew","Mia","Michael","Oliver","Olivia","Owen",
            "Penelope","Riley","Sophia","Sophie",
            "William","Aaliyah","Addison","Aria","Aubrey","Avery","Bella",
            "Carter","Claire","Dylan","Eli","Eleanor","Elizabeth","Ella",
            "Ellie","Evelyn","Ezra","Grace","Grayson","Hannah","Harper",
            "Hazel","Isabella","Isabelle","Jack","James","Liam","Lucas","Luna",
            "Madison","Mason","Natalie","Noah","Oliver","Olivia","Owen","Paisley",
            "Penelope","Stella","Theodore", "Meena", "Neha"
        };
        ArrayList<String> names = new ArrayList<>();
        names.addAll(Arrays.asList(studentNameArray));
        for (String n : names) {
            User u = userManager.addNewUser();
            u.setName(n);
            u.setEmail(n+"@email.com");
            u.setRoleStudent();
            u.updatePassword("password");
            userManager.updateUser(u);
            c1.addNewStudent(u);
            c2.addNewStudent(u);
            c3.addNewStudent(u);
            c4.addNewStudent(u);
            StudentCourseHistory stch = scHisManager.EnrollNewStudent(u);
            stch.EnrollNewCourse(c1);
            stch.EnrollNewCourse(c2);
            stch.EnrollNewCourse(c3);
            stch.setRandomGrades(c3);
            stch.EnrollNewCourse(c4);
            stch.setRandomGrades(c4);
            scHisManager.updateHistory(u, stch);
            System.out.println(u);
        }
        fall2023.updateCourse(c1);
        fall2023.updateCourse(c2);
        spring2023.updateCourse(c3);
        spring2023.updateCourse(c4);
        
        String[] exStudentNameArray = {
            "Theodore", "Meena", "Neha"
        };

        CourseOffering c5 = fall2023.findCourseOfferingbyName("Algorithms 1");
        CourseOffering c6 = fall2023.findCourseOfferingbyName("Algorithms 2");
        CourseOffering c7 = spring2023.findCourseOfferingbyName("Computer Operating systems");
        CourseOffering c8 = spring2023.findCourseOfferingbyName("Internet of things: a new perspective");
        CourseOffering c9 = spring2023.findCourseOfferingbyName("Advances in software engineering");
        CourseOffering c10 = spring2023.findCourseOfferingbyName( "Product management and principles");
        CourseOffering c11 = spring2023.findCourseOfferingbyName( "English for engineers");
        CourseOffering c12 = spring2023.findCourseOfferingbyName( "Building business systems");
        
        ArrayList<String> exnames = new ArrayList<>();
        exnames.addAll(Arrays.asList(exStudentNameArray));
        for (String n : exnames) {
            User u = userManager.findUserbyName(n);
            StudentCourseHistory stch = scHisManager.findHistory(u);
            c5.addNewStudent(u);
            stch.EnrollNewCourse(c5);
            stch.setRandomGrades(c5);
            c6.addNewStudent(u);
            stch.EnrollNewCourse(c6);
            stch.setRandomGrades(c6);
            c7.addNewStudent(u);
            stch.EnrollNewCourse(c7);
            stch.setRandomGrades(c7);
            c8.addNewStudent(u);
            stch.EnrollNewCourse(c8);
            stch.setRandomGrades(c8);
            c9.addNewStudent(u);
            stch.EnrollNewCourse(c9);
            stch.setRandomGrades(c9);
            c10.addNewStudent(u);
            stch.EnrollNewCourse(c10);
            stch.setRandomGrades(c10);
            c11.addNewStudent(u);
            stch.EnrollNewCourse(c11);
            stch.setRandomGrades(c11);
            c12.addNewStudent(u);
            stch.EnrollNewCourse(c12);
            stch.setRandomGrades(c12);
            scHisManager.updateHistory(u, stch);
            System.out.println(u);
        }
        spring2023.updateCourse(c5);
        spring2023.updateCourse(c6);
        spring2023.updateCourse(c7);
        spring2023.updateCourse(c8);
        spring2023.updateCourse(c9);
        spring2023.updateCourse(c10);
        spring2023.updateCourse(c11);
        spring2023.updateCourse(c12);
        
    }
    
    public void enrollNewStudent(CourseOffering c, User u){
        c.addNewStudent(u);
        StudentCourseHistory stch = scHisManager.findHistory(u);
        stch.EnrollNewCourse(c);
        scHisManager.updateHistory(u, stch);
        fall2023.updateCourse(c);
                
    }
    
    public Company retrieveCompany(String val){
        Company c = new Company();
        for (Company co : companies){
            if (co.getName().contains(val)){
                c = co;
            }
        }
        return c;
    }
    
    
   
    
}
